using com.apamax.Complex;
/*
Test:
* constants
* real/imag
* from*
* max/min
* toValueString
* format*
* isNaN
* bitEquals
* isFinite/Infinite
*/
monitor Instances
{
	action onload()
	{
		testConstants();
		testCreateAccess();
	}
	action testCreateAccess()
	{
		Complex c1 := Complex(42., 666.);
		Asserts.assertEquals("c1r", 42., c1.real());
		Asserts.assertEquals("c1i", 666., c1.imag());
		Complex c2 := Complex.fromRealFloat(42.);
		Asserts.assertEquals("c2r", 42., c2.real());
		Asserts.assertEquals("c2i", 0., c2.imag());
		Complex c3 := Complex.fromRealInteger(42);
		Asserts.assertEquals("c3r", 42., c3.real());
		Asserts.assertEquals("c3i", 0., c3.imag());
		Complex c4 := Complex.fromImaginaryFloat(666.);
		Asserts.assertEquals("c4r", 0., c4.real());
		Asserts.assertEquals("c4i", 666., c4.imag());
		Complex c5 := Complex.fromImaginaryInteger(666);
		Asserts.assertEquals("c5r", 0., c5.real());
		Asserts.assertEquals("c5i", 666., c5.imag());
		Complex c6 := Complex.fromPolar(6., float.PI/2.);
		Asserts.assertEquals("c6r", 0., c6.real());
		Asserts.assertEquals("c6i", 6., c6.imag());
	}
	action testConstants()
	{
		Asserts.assertEquals("PIr", float.PI, Complex.PI().r);
		Asserts.assertEquals("PIi", 0., Complex.PI().i);
		Asserts.assertEquals("Er", float.E, Complex.E().r);
		Asserts.assertEquals("Ei", 0., Complex.E().i);
		Asserts.assertEquals("0r", 0., Complex.ZERO().r);
		Asserts.assertEquals("0i", 0., Complex.ZERO().i);
		Asserts.assertEquals("1r", 1., Complex.ONE().r);
		Asserts.assertEquals("1i", 0., Complex.ONE().i);
		Asserts.assertEquals("Ir", 0., Complex.I().r);
		Asserts.assertEquals("Ii", 1., Complex.I().i);
		Asserts.assertEquals("INFINITYr", float.INFINITY, Complex.INFINITY().r);
		Asserts.assertEquals("INFINITYi", float.INFINITY, Complex.INFINITY().i);
		Asserts.assertEquals("NANr", true, Complex.NAN().r.isNaN());
		Asserts.assertEquals("NANi", true, Complex.NAN().i.isNaN());
		Asserts.assertEquals("NAN", true, Complex.NAN().isNaN());
	}
}
