using com.apamax.Complex;

monitor Arithmetic
{
	action onload()
	{
		testbinary(
			"add",
			Complex(5., 6.),
			Complex(2., 4.),
			Complex(3., 2.));
		testbinary(
			"subtract",
			Complex(5., -6.),
			Complex(12., 7.),
			Complex(7., 13.));
		testbinary(
			"multiply",
			Complex(-7., 22.),
			Complex(2., 3.),
			Complex(4., 5.));
		testbinary(
			"divide",
			Complex(2., 3.),
			Complex(-7., 22.),
			Complex(4., 5.));
//		testbinary(
//			"pow",
//			...,
//			...,
//			...);
		testunary(
			"negate",
			Complex(-2., 3.),
			Complex(2., -3.));
		testunary(
			"conjugate",
			Complex(2., -3.),
			Complex(2., 3.));
		testunary(
			"reciprocal",
			Complex.divide(Complex(1., 0.), Complex(2., 3.)),
			Complex(2., 3.));
//		testunary(
//			"exp",
//			...,
//			...);
//		testunary(
//			"ln",
//			...,
//			...);
//		testunary(
//			"exp",
//			...,
//			...);
//		testunary(
//			"sqrt",
//			...,
//			...);

		assertEquals("abs", 5., Complex(3., 4.).abs());
		assertEquals("arg", (40000./5.).round(), (10000.*Complex(3., 4.).arg().sin()).round());
		}
// multiplyReal, divideReal, umultiplyReal, udivideReal
	}

	action assertEquals(string name, any a, any b)
	{
		if not a = b {
			log "assert fail "+name+": "+a.valueToString()+" != "+b.valueToString() at ERROR;
		}
	}
	
	action testunary(string name, 
			Complex r,
			Complex a)
	{
		Complex a2 := a.clone(); 
		action<Complex> returns Complex staticAction := 
			<action<Complex> returns Complex> (<any> r).getAction(name);
		log name+" "+a.toValueString();
		assertEquals(name, r, staticAction(a));
		
		action<> returns Complex instanceAction := 
			<action<> returns Complex> (<any> a).getAction("u"+name);
		log "u"+name+" "+a.toValueString();
		Complex rv := instanceAction();
		assertEquals("u"+name+"rv", r, rv);

		action<> returns Complex instanceAction2 := 
			<action<> returns Complex> (<any> a2).getAction("u"+name);
		log "u"+name+" "+a2.toValueString();
		Complex _ := instanceAction2();
		assertEquals("u"+name, r, a2);
	}


	
	action testbinary(string name, 
			Complex r,
			Complex a,
			Complex b)
	{
		Complex a2 := a.clone(); 
		action<Complex, Complex> returns Complex staticAction := 
			<action<Complex, Complex> returns Complex> (<any> r).getAction(name);
		log a.toValueString()+" "+name+" "+b.toValueString();
		assertEquals(name, r, staticAction(a));
		
		action<Complex> returns Complex instanceAction := 
			<action<Complex> returns Complex> (<any> a).getAction("u"+name);
		log a.toValueString()+" u"+name+" "+b.toValueString();
		Complex rv := instanceAction(b);
		assertEquals("u"+name+"rv", r, rv);

		action<Complex> returns Complex instanceAction2 := 
			<action<Complex> returns Complex> (<any> a2).getAction("u"+name);
		log a2.toValueString()+" u"+name+" "+b.toValueString();
		Complex _ := instanceAction2(b);
		assertEquals("u"+name, r, a2);
	}

}

