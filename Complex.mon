/**
 * Title:        Complex.mon
 * Description:  EPL Complex Numbers
 * Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http:/www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.apamax;

event Complex
{
	static action E() returns Complex { return Complex(float.E, 0.); }
	static action PI() returns Complex { return Complex(float.PI, 0.); }
	static action I() returns Complex { return Complex(0., 1.); }
	static action ZERO() returns Complex { return Complex(0., 0.); }
	static action ONE() returns Complex { return Complex(1., 0.); }
	static action INFINITY() returns Complex { return Complex(float.INFINITY, float.INFINITY); }
	static action NAN() returns Complex { return Complex(float.NAN, float.NAN); }

	action real() returns float { return r; }
	action imag() returns float { return i; }

	static action fromRealFloat(float r) returns Complex
	{
		return Complex(r, 0.);
	}
	static action fromImaginaryFloat(float i) returns Complex
	{
		return Complex(0., i);
	}
	static action fromRealInteger(integer r) returns Complex
	{
		return Complex(r.toFloat(), 0.);
	}
	static action fromImaginaryInteger(integer i) returns Complex
	{
		return Complex(0., i.toFloat());
	}
	static action fromPolar(float abs, float arg) returns Complex
	{
		return Complex(abs*arg.cos(), abs*arg.sin());
	}
	//
	static action conjugate(Complex a) returns Complex
	{
		return Complex(a.r, -a.i);
	}
	//
	action uconjugate() returns Complex
	{
		i := -i;
		return self;
	}

	//
	static action add(Complex a, Complex b) returns Complex
	{
		return Complex(a.r+b.r, a.i+b.i);
	}
	//
	static action subtract(Complex a, Complex b) returns Complex
	{
		return Complex(a.r-b.r, a.i-b.i);
	}
	//
	static action multiply(Complex a, Complex b) returns Complex
	{
		return Complex(a.r*b.r-a.i*b.i, a.r*b.i+a.i*b.r);
	}
	//
	static action divide(Complex a, Complex b) returns Complex
	{
		float denom := b.r*b.r+b.i*b.i;
		return Complex((a.r*b.r+a.i*b.i)/denom, (b.r*a.i-a.r*b.i)/denom);
	}
	static action max(Complex a, Complex b) returns Complex
	{
		if (a.abs() > b.abs()) {
			return a;
		} else {
			return b;
		}
	}
	static action min(Complex a, Complex b) returns Complex
	{
		if (a.abs() < b.abs()) {
			return a;
		} else {
			return b;
		}
	}
	//
	static action negate(Complex a) returns Complex
	{
		return Complex(-a.r, -a.i);
	}
	//
	static action reciprocal(Complex a) returns Complex
	{
		float denom := a.r*a.r+a.i*a.i;
		return Complex(a.r/denom, -a.i/denom);
	}

	action toValueString() returns string
	{
		string spacer;
		if i >= 0. {
			spacer := "+";
		} else {
			spacer := "";
		}
		return r.toString()+spacer+i.toString()+"i";
	}

	action formatFixed(integer dp) returns string
	{
		string spacer;
		if i >= 0. {
			spacer := "+";
		} else {
			spacer := "";
		}
		return r.formatFixed(dp)+spacer+i.formatFixed(dp)+"i";
	}

	action formatScientific(integer sf) returns string
	{
		string spacer;
		if i >= 0. {
			spacer := "+";
		} else {
			spacer := "";
		}
		return r.formatScientific(sf)+spacer+i.formatScientific(sf)+"i";
	}

	action abs() returns float
	{
		return (r*r+i*i).sqrt();
	}
	action isNaN() returns boolean
	{
		return r.isNaN() or i.isNaN();
	}
	action bitEquals(Complex b) returns boolean
	{
		return r.bitEquals(b.r) and i.bitEquals(b.i);
	}
	action isFinite() returns boolean
	{
		return r.isFinite() and i.isFinite();
	}
	action isInfinite() returns boolean
	{
		return r.isInfinite() or i.isInfinite();
	}

	//
	action unegate() returns Complex
	{
		r := -r;
		i := -i;
		return self;
	}
	//
	action udivide(Complex b) returns Complex
	{
		float denom := b.r*b.r+b.i*b.i;
		float tr := (r*b.r+i*b.i)/denom;
		i := (b.r*i-r*b.i)/denom;
		r := tr;
		return self;
	}
	//
	action uadd(Complex b) returns Complex 
	{
		r := r+b.r;
		i := i+b.i;
		return self;
	}
	//
	action usubtract(Complex b) returns Complex
	{
		r := r-b.r;
		i := i-b.i;
		return self;
	}
	//
	action umultiply(Complex b) returns Complex
	{
		float tr := r*b.r-i*b.i;
		i := r*b.i+i*b.r;
		r := tr;
		return self;
	}
	//
	action ureciprocal() returns Complex
	{
		float denom := r*r+i*i;
		r := r/denom;
		i := -i/denom;
		return self;
	}
	//
	action uexp() returns Complex
	{
		float mul := r.exp();
		r := mul*i.cos();
		i := mul*i.sin();
		return self;
	}
	action arg() returns float
	{
		return i.atan2(r);
	}
	//
	action usqrt() returns Complex
	{
		float sqrt := r.sqrt();
		float arg := self.arg();
		r := sqrt*(arg/2.).cos(); 
		i := sqrt*(arg/2.).sin();
		return self;
	}
	//
	static action sqrt(Complex a) returns Complex
	{
		float sqrt := a.r.sqrt();
		float arg := a.arg();
		return Complex(sqrt*(arg/2.).cos(), sqrt*(arg/2.).sin());
	}
	//
	action uln() returns Complex
	{
		if r = 0. and i = 0. then {
			r := float.NAN;
			i := float.NAN;
		} else {
			float arg := self.arg();
			r := abs().ln();
			i := arg;
		}
		return self;
	}
	//
	static action ln(Complex a) returns Complex
	{
		if a.r = 0. and a.i = 0. then {
			return Complex(float.NAN, float.NAN);
		}
		return Complex(a.abs().ln(), a.arg());
	}
	//
	static action pow(Complex a, Complex b) returns Complex
	{
		return Complex.exp(Complex.multiply(b, Complex.ln(a)));
	}
	//
	static action exp(Complex a) returns Complex
	{
		float mul := a.r.exp();
		return Complex(mul*a.i.cos(), mul*a.i.sin());
	}
	
	static action divideReal(Complex a, float b) returns Complex
	{
		return Complex(a.r/b, a.i/b);
	}
	static action multiplyReal(Complex a, float b) returns Complex
	{
		return Complex(a.r*b, a.i*b);
	}
	action udivideReal(float b) returns Complex
	{
		r := r/b;
		i := i/b;
		return self;
	}
	action umultiplyReal(float b) returns Complex
	{
		r := r*b;
		i := i*b;
		return self;
	}
	static action cos(Complex a) returns Complex
	{
		Complex res := Complex.multiply(a, Complex(0., 1.));
		Complex _ := res.uexp();
		_ := res.uadd(Complex.reciprocal(res));
		return res.udivideReal(2.0);
	}
	static action sin(Complex a) returns Complex
	{
		Complex res := Complex.multiply(a, Complex(0., 1.));
		Complex _ := res.uexp();
		_ := res.uadd(Complex.reciprocal(res));
		return res.udivide(Complex(0., 2.));
	}
	static action tan(Complex a) returns Complex
	{
		Complex res := Complex.multiply(a, Complex(0., 1.));
		Complex _ := res.umultiplyReal(2.0);
		_ := res.uexp();
		Complex div := res.clone();
		res.r := res.r-1.;
		div.r := div.r+1.;
		return res.udivide(div);
	}

	/** @private */
	float r;
	/** @private */
	float i;
}

