<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../" display="com.apamax" name="com.apamax"><Type category="Event" name="Quaternion"><Description><![CDATA[Event that represents quaternionss in EPL.

 A Quaternion can be created either from the real and i, j, k parts as floating point numbers, eg: <pre>
Quaternion q := Quaternion(3.1, 5.0, 0.1, 2.); // 3.1 + 5i + 0.1j + 2k
</pre> or by using one of the static from functions on Quaternion: <pre>
Quaternion c := Quaternion.fromComplex(Complex(1., 1.)); // 1 + i
</pre> There are also a number of convenince functions to return certain constants as Quaternions.

 You can inspect a Quaternion using the scalar(), vector() and getI(), getJ() and getK() functions, which return the various parts of the Quaternion.

 For operating on Quaternions this class provides operations as both static and event instance actions. Typically these have both a static version and an instance version with the name prefixed by <tt>u</tt>. The static action creates and returns a new Quaternion. The instance <tt>u</tt> form will modify the quaternion and return a reference to itself, to be used in chains of function calls. In other words, if <tt>add(a, b)</tt> corresponds to <tt>a + b</tt>, then <tt>a.uadd(b)</tt> corresponds to <tt>a += b</tt>. This has been done for performance reasons.]]></Description><Summary><![CDATA[Event that represents quaternionss in EPL.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="INTERNAL_TO_STRING" private="true" type="integer" typeValue="1"><Description/><Summary/><TypeParameters/></Member><Member constant="true" name="INTERNAL_FORMAT_FIXED" private="true" type="integer" typeValue="2"><Description/><Summary/><TypeParameters/></Member><Member constant="true" name="INTERNAL_FORMAT_SCIENTIFIC" private="true" type="integer" typeValue="3"><Description/><Summary/><TypeParameters/></Member><Member name="r" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="i" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="j" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="k" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Action name="formatScientific" staticNature=""><Description><![CDATA[Return the Quaternion as a string in scientific notation e.g. 1.3e-2+5.6e10j]]></Description><Summary><![CDATA[Return the Quaternion as a string in scientific notation e.g. 1.3e-2+5.6e10j]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="sf" type="integer"/></Parameters></Action><Action name="ZERO" staticNature="static "><Description><![CDATA[Returns 0, represented as a quaternion.]]></Description><Summary><![CDATA[Returns 0, represented as a quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="crossProduct" staticNature="static "><Description><![CDATA[Calculate the cross product of two Quaternions. If the Quaternions are not vector quaternions, the resultant scalar part will be the product of the scalar parts of the quaternions.]]></Description><Summary><![CDATA[Calculate the cross product of two Quaternions. If the Quaternions are not vector quaternions, the resultant scalar part will be the product of the scalar parts of the quaternions.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="toValueString" staticNature=""><Description><![CDATA[Return the Quaternion as a string. e.g. 0.3-4.5i]]></Description><Summary><![CDATA[Return the Quaternion as a string. e.g. 0.3-4.5i]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="ln" staticNature="static "><Description><![CDATA[Return the natural log of the argument as a new Quaternion.]]></Description><Summary><![CDATA[Return the natural log of the argument as a new Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[ln(a)]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="getI" staticNature=""><Description><![CDATA[Returns the i part of this Quaternion.]]></Description><Summary><![CDATA[Returns the i part of this Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="getJ" staticNature=""><Description><![CDATA[Returns the j part of this Quaternion.]]></Description><Summary><![CDATA[Returns the j part of this Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="getK" staticNature=""><Description><![CDATA[Returns the k part of this Quaternion.]]></Description><Summary><![CDATA[Returns the k part of this Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="internalToStringFormat" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="f" type="float"/><Parameter name="mode" type="integer"/><Parameter name="arg" type="integer"/></Parameters></Action><Action name="vectorNorm" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="isNaN" staticNature=""><Description><![CDATA[Returns true if any part of this Quaternion is not a number.]]></Description><Summary><![CDATA[Returns true if any part of this Quaternion is not a number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="norm" staticNature=""><Description><![CDATA[Return the norm of this Quaternion.]]></Description><Summary><![CDATA[Return the norm of this Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"><Description><![CDATA[||a||]]></Description></Returns></Action><Action name="conjugate" staticNature="static "><Description><![CDATA[Return a new Quaternion which is the complex conjugate of the argument.]]></Description><Summary><![CDATA[Return a new Quaternion which is the complex conjugate of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="fromKFloat" staticNature="static "><Description><![CDATA[Creates a Quaternion with the given float as k and the other parts 0.]]></Description><Summary><![CDATA[Creates a Quaternion with the given float as k and the other parts 0.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="k" type="float"/></Parameters></Action><Action name="fromComplex" staticNature="static "><Description><![CDATA[Creates a Quaternion from a Complex number, with the j and k parts 0.]]></Description><Summary><![CDATA[Creates a Quaternion from a Complex number, with the j and k parts 0.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="c" package="com.apamax" type="Complex"/></Parameters></Action><Action name="internalToString" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="mode" type="integer"/><Parameter name="arg" type="integer"/></Parameters></Action><Action name="unegate" staticNature=""><Description><![CDATA[Set this Quaternion to its own negation and return self.]]></Description><Summary><![CDATA[Set this Quaternion to its own negation and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="ureciprocal" staticNature=""><Description><![CDATA[Set this Complex number to its own reciprocal and return self.]]></Description><Summary><![CDATA[Set this Complex number to its own reciprocal and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="exp" staticNature="static "><Description><![CDATA[Exponentiate the argument and return the result as a new Quaternion]]></Description><Summary><![CDATA[Exponentiate the argument and return the result as a new Quaternion]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[e<sup>a</sup>]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="add" staticNature="static "><Description><![CDATA[Add two quaternions and return a new Quaternion with the result.]]></Description><Summary><![CDATA[Add two quaternions and return a new Quaternion with the result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[a+b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="bitEquals" staticNature=""><Description><![CDATA[Returns true if all parts of this Quaternion are bit-equals to the corresponding parts of the argument.]]></Description><Summary><![CDATA[Returns true if all parts of this Quaternion are bit-equals to the corresponding parts of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="umultiply" staticNature=""><Description><![CDATA[Set this Quaternion to multiply by the argument and return self. Since multiplication on quaternions is not commutative a*b is not b*a for all cases. This action calculates self*b. This also means that a/b is ambiguous, since it could mean a(b^-1) or (b^-1)a. To divide use umultiply and ureciprocal in conjuction to specify the order.]]></Description><Summary><![CDATA[Set this Quaternion to multiply by the argument and return self. Since multiplication on quaternions is not commutative a*b is not b*a for all cases. This action calculates self*b. This also means that a/b is ambiguous, since it could mean a(b^-1) or (b^-1)a. To divide use umultiply and ureciprocal in conjuction to specify the order.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="subtract" staticNature="static "><Description><![CDATA[Subtract two quaternions and return a new Quaternion with the result.]]></Description><Summary><![CDATA[Subtract two quaternions and return a new Quaternion with the result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[a-b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="scalar" staticNature=""><Description><![CDATA[Returns the real/scalar part of this Quaternion.]]></Description><Summary><![CDATA[Returns the real/scalar part of this Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="multiplyReal" staticNature="static "><Description><![CDATA[Multiply the given Quaternion by a real divisor and return the result as a new Quaternion.]]></Description><Summary><![CDATA[Multiply the given Quaternion by a real divisor and return the result as a new Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[a*b]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" type="float"/></Parameters></Action><Action name="formatFixed" staticNature=""><Description><![CDATA[Return the Quaternion as a string with a fixed number of decimal places. e.g. 0.30j-4.51k]]></Description><Summary><![CDATA[Return the Quaternion as a string with a fixed number of decimal places. e.g. 0.30j-4.51k]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="dp" type="integer"><Description><![CDATA[The number of decimal places in each part.]]></Description></Parameter></Parameters></Action><Action name="uln" staticNature=""><Description><![CDATA[Sets this Quaternion to the natural logarithm of itself and return self.]]></Description><Summary><![CDATA[Sets this Quaternion to the natural logarithm of itself and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="udivideReal" staticNature=""><Description><![CDATA[Set this Quaternion to be divided by the real argument and return self.]]></Description><Summary><![CDATA[Set this Quaternion to be divided by the real argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="b" type="float"/></Parameters></Action><Action name="fromIFloat" staticNature="static "><Description><![CDATA[Creates a Quaternion with the given float as i and the other parts 0.]]></Description><Summary><![CDATA[Creates a Quaternion with the given float as i and the other parts 0.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="i" type="float"/></Parameters></Action><Action name="uadd" staticNature=""><Description><![CDATA[Set this Complex number to add the argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to add the argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="uexp" staticNature=""><Description><![CDATA[Exponentiate this Quaternion and return self.]]></Description><Summary><![CDATA[Exponentiate this Quaternion and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[e<sup>self</sup>]]></Description></Returns></Action><Action name="upowReal" staticNature=""><Description><![CDATA[Raise this Quaternion to the power of a real and return self.]]></Description><Summary><![CDATA[Raise this Quaternion to the power of a real and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[self<sup>x</sup>]]></Description></Returns><Parameters><Parameter name="x" type="float"/></Parameters></Action><Action name="powReal" staticNature="static "><Description><![CDATA[Return a Quaternion raised to the power of a real as a new Quaternion]]></Description><Summary><![CDATA[Return a Quaternion raised to the power of a real as a new Quaternion]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[a<sup>b</sup>]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" type="float"/></Parameters></Action><Action name="fromRealFloat" staticNature="static "><Description><![CDATA[Creates a Quaternion with the given float as the real part and the other parts 0.]]></Description><Summary><![CDATA[Creates a Quaternion with the given float as the real part and the other parts 0.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="r" type="float"/></Parameters></Action><Action name="E" staticNature="static "><Description><![CDATA[Returns Euler's number e, represented as a quaternion.]]></Description><Summary><![CDATA[Returns Euler's number e, represented as a quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="ONE" staticNature="static "><Description><![CDATA[Returns 1, represented as a quaternion.]]></Description><Summary><![CDATA[Returns 1, represented as a quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="I" staticNature="static "><Description><![CDATA[Returns the square root of -1, i, represented as a quaternion.]]></Description><Summary><![CDATA[Returns the square root of -1, i, represented as a quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="reciprocal" staticNature="static "><Description><![CDATA[Return a new Quaternion which is the reciprocal of the argument.]]></Description><Summary><![CDATA[Return a new Quaternion which is the reciprocal of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[-1/a]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="dotProduct" staticNature="static "><Description><![CDATA[Calculate the dot product of two vector Quaternions. This ignores the scalar part of the Quaternions.]]></Description><Summary><![CDATA[Calculate the dot product of two vector Quaternions. This ignores the scalar part of the Quaternions.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="isFinite" staticNature=""><Description><![CDATA[Returns true if all parts of this Quaternion are finite.]]></Description><Summary><![CDATA[Returns true if all parts of this Quaternion are finite.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="INFINITY" staticNature="static "><Description><![CDATA[Returns infinity + infinity*i, represented as a quaternion.]]></Description><Summary><![CDATA[Returns infinity + infinity*i, represented as a quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="isInfinite" staticNature=""><Description><![CDATA[Returns true if any part of this Quaternion is infinite.]]></Description><Summary><![CDATA[Returns true if any part of this Quaternion is infinite.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="uconjugate" staticNature=""><Description><![CDATA[Assign this to its complex conjugate and return self.]]></Description><Summary><![CDATA[Assign this to its complex conjugate and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="vector" staticNature=""><Description><![CDATA[Returns the imaginary/vector parts of this Quaternion.]]></Description><Summary><![CDATA[Returns the imaginary/vector parts of this Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="float"/></Parameters></Returns></Action><Action name="multiply" staticNature="static "><Description><![CDATA[Multiply two quaternions and return a new Quaternion with the result. Since multiplication on quaternions is not commutative a*b is not b*a for all cases. This also means that a/b is ambiguous, since it could mean a(b^-1) or (b^-1)a. To divide use multiply and reciprocal in conjuction to specify the order.]]></Description><Summary><![CDATA[Multiply two quaternions and return a new Quaternion with the result. Since multiplication on quaternions is not commutative a*b is not b*a for all cases. This also means that a/b is ambiguous, since it could mean a(b^-1) or (b^-1)a. To divide use multiply and reciprocal in conjuction to specify the order.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[a*b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="divideReal" staticNature="static "><Description><![CDATA[Divide the given Quaternion by a real divisor and return the result as a new Quaternion.]]></Description><Summary><![CDATA[Divide the given Quaternion by a real divisor and return the result as a new Quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[a/b]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/><Parameter name="b" type="float"/></Parameters></Action><Action name="fromJFloat" staticNature="static "><Description><![CDATA[Creates a Quaternion with the given float as i and the other parts 0.]]></Description><Summary><![CDATA[Creates a Quaternion with the given float as i and the other parts 0.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="j" type="float"/></Parameters></Action><Action name="umultiplyReal" staticNature=""><Description><![CDATA[Set this Quaternion to be multiplied by the real argument and return self.]]></Description><Summary><![CDATA[Set this Quaternion to be multiplied by the real argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="b" type="float"/></Parameters></Action><Action name="usubtract" staticNature=""><Description><![CDATA[Set this Quaternion to subtract the argument and return self.]]></Description><Summary><![CDATA[Set this Quaternion to subtract the argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/><Parameters><Parameter name="b" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="negate" staticNature="static "><Description><![CDATA[Return a new Quaternion which is the negation of the argument.]]></Description><Summary><![CDATA[Return a new Quaternion which is the negation of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"><Description><![CDATA[-a]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Quaternion"/></Parameters></Action><Action name="PI" staticNature="static "><Description><![CDATA[Returns the constant pi, represented as a quaternion.]]></Description><Summary><![CDATA[Returns the constant pi, represented as a quaternion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action><Action name="NAN" staticNature="static "><Description><![CDATA[Returns a Quaternion which is not a number.]]></Description><Summary><![CDATA[Returns a Quaternion which is not a number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Quaternion"/></Action></Type><Type category="Event" name="Complex"><Description><![CDATA[Event that represents complex numbers in EPL.

 A Complex number can be created either from the real and imaginaries parts as floating point numbers, eg: <pre>
Complex c := Complex(3.1, 5.0); // 3.1 + 5i
</pre> or by using one of the static from functions on Complex, either convenience methods, or conversion from polar coordinates in radians: <pre>
Complex c := Complex.fromPolar(7.2, float.PI/2.0); // 7.2i
</pre> There are also a number of convenince functions to return certain constants an Complex numbers.

 You can inspect a Complex number using the real() and imag() functions, which return the real and imaginary parts respectively, and the arg() and abs() functions which calculate the polar versions of the Complex number.

 For operating on Complex numbers this class provides operations as both static and event instance actions. Typically these have both a static version and an instance version with the name prefixed by <tt>u</tt>. The static action creates and returns a new Complex number. The instance <tt>u</tt> form will modify the complex number and return a reference to itself, to be used in chains of function calls. In other words, if <tt>add(a, b)</tt> corresponds to <tt>a + b</tt>, then <tt>a.uadd(b)</tt> corresponds to <tt>a += b</tt>. This has been done for performance reasons.]]></Description><Summary><![CDATA[Event that represents complex numbers in EPL.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="r" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Member name="i" private="true" type="float"><Description/><Summary/><TypeParameters/></Member><Action name="formatScientific" staticNature=""><Description><![CDATA[Return the Complex number as a string in scientific notation e.g. 1.3e-2+5.6e10i]]></Description><Summary><![CDATA[Return the Complex number as a string in scientific notation e.g. 1.3e-2+5.6e10i]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="sf" type="integer"/></Parameters></Action><Action name="ZERO" staticNature="static "><Description><![CDATA[Returns 0, represented as a complex number.]]></Description><Summary><![CDATA[Returns 0, represented as a complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="toValueString" staticNature=""><Description><![CDATA[Return the Complex number as a string. e.g. 0.3-4.5i]]></Description><Summary><![CDATA[Return the Complex number as a string. e.g. 0.3-4.5i]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="ln" staticNature="static "><Description><![CDATA[Return the natural log of the argument as a new Complex number.]]></Description><Summary><![CDATA[Return the natural log of the argument as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[ln(a)]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="cos" staticNature="static "><Description><![CDATA[Returns the cosine of the argument as a new Complex number.]]></Description><Summary><![CDATA[Returns the cosine of the argument as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[cos(a)]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="isNaN" staticNature=""><Description><![CDATA[Returns true if either part of this Complex number is not a number.]]></Description><Summary><![CDATA[Returns true if either part of this Complex number is not a number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="fromRealInteger" staticNature="static "><Description><![CDATA[Creates a Complex number with the given integer as the real part and 0 as the imaginary part.]]></Description><Summary><![CDATA[Creates a Complex number with the given integer as the real part and 0 as the imaginary part.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="r" type="integer"/></Parameters></Action><Action name="conjugate" staticNature="static "><Description><![CDATA[Return a new Complex number which is the complex conjugate of the argument.]]></Description><Summary><![CDATA[Return a new Complex number which is the complex conjugate of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="sqrt" staticNature="static "><Description><![CDATA[Returns the square root of the argument as a new Complex number.]]></Description><Summary><![CDATA[Returns the square root of the argument as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a<sup>1/2</sup>]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="unegate" staticNature=""><Description><![CDATA[Set this Complex number to its own negation and return self.]]></Description><Summary><![CDATA[Set this Complex number to its own negation and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="ureciprocal" staticNature=""><Description><![CDATA[Set this Complex number to its own reciprocal and return self.]]></Description><Summary><![CDATA[Set this Complex number to its own reciprocal and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="exp" staticNature="static "><Description><![CDATA[Exponentiate the argument and return the result as a new Complex number.]]></Description><Summary><![CDATA[Exponentiate the argument and return the result as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[e<sup>a</sup>]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="add" staticNature="static "><Description><![CDATA[Add two complex numbers and return a new Complex number with the result.]]></Description><Summary><![CDATA[Add two complex numbers and return a new Complex number with the result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a+b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="tan" staticNature="static "><Description><![CDATA[Returns the tangent of the argument as a new Complex number.]]></Description><Summary><![CDATA[Returns the tangent of the argument as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[tan(a)]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="bitEquals" staticNature=""><Description><![CDATA[Returns true if both the real and imaginary parts of this Complex number are bit-equals to the real and imaginary parts of the argument.]]></Description><Summary><![CDATA[Returns true if both the real and imaginary parts of this Complex number are bit-equals to the real and imaginary parts of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="umultiply" staticNature=""><Description><![CDATA[Set this Complex number to multiply by the argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to multiply by the argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="subtract" staticNature="static "><Description><![CDATA[Subtract two complex numbers and return a new Complex number with the result.]]></Description><Summary><![CDATA[Subtract two complex numbers and return a new Complex number with the result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a-b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="real" staticNature=""><Description><![CDATA[Returns the real part of this Complex number.]]></Description><Summary><![CDATA[Returns the real part of this Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="fromImaginaryInteger" staticNature="static "><Description><![CDATA[Creates a Complex number with the given integer as the imaginary part and 0 as the real part.]]></Description><Summary><![CDATA[Creates a Complex number with the given integer as the imaginary part and 0 as the real part.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="i" type="integer"/></Parameters></Action><Action name="usqrt" staticNature=""><Description><![CDATA[Set this Complex number to its square root and return self.]]></Description><Summary><![CDATA[Set this Complex number to its square root and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="multiplyReal" staticNature="static "><Description><![CDATA[Multiply the given complex number by a real divisor and return the result as a new Complex number.]]></Description><Summary><![CDATA[Multiply the given complex number by a real divisor and return the result as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a*b]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" type="float"/></Parameters></Action><Action name="formatFixed" staticNature=""><Description><![CDATA[Return the Complex number as a string with a fixed number of decimal places. e.g. 0.30-4.51i]]></Description><Summary><![CDATA[Return the Complex number as a string with a fixed number of decimal places. e.g. 0.30-4.51i]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="dp" type="integer"><Description><![CDATA[The number of decimal places in each of the real and imaginary parts.]]></Description></Parameter></Parameters></Action><Action name="uln" staticNature=""><Description><![CDATA[Sets this Complex number to the natural logarithm of itself and return self.]]></Description><Summary><![CDATA[Sets this Complex number to the natural logarithm of itself and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="udivideReal" staticNature=""><Description><![CDATA[Set this Complex number to be divided by the real argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to be divided by the real argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="b" type="float"/></Parameters></Action><Action name="uadd" staticNature=""><Description><![CDATA[Set this Complex number to add the argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to add the argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="fromImaginaryFloat" staticNature="static "><Description><![CDATA[Creates a Complex number with the given float as the imaginary part and 0 as the real part.]]></Description><Summary><![CDATA[Creates a Complex number with the given float as the imaginary part and 0 as the real part.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="i" type="float"/></Parameters></Action><Action name="uexp" staticNature=""><Description><![CDATA[Set this Complex number it's exponent (e<sup>z</sup>) and return self.]]></Description><Summary><![CDATA[Set this Complex number it's exponent (e<sup>z</sup>) and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="fromRealFloat" staticNature="static "><Description><![CDATA[Creates a Complex number with the given float as the real part and 0 as the imaginary part.]]></Description><Summary><![CDATA[Creates a Complex number with the given float as the real part and 0 as the imaginary part.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="r" type="float"/></Parameters></Action><Action name="E" staticNature="static "><Description><![CDATA[Returns Euler's number e, represented as a complex number.]]></Description><Summary><![CDATA[Returns Euler's number e, represented as a complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="ONE" staticNature="static "><Description><![CDATA[Returns 1, represented as a complex number.]]></Description><Summary><![CDATA[Returns 1, represented as a complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="I" staticNature="static "><Description><![CDATA[Returns the square root of -1, i, represented as a complex number.]]></Description><Summary><![CDATA[Returns the square root of -1, i, represented as a complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="reciprocal" staticNature="static "><Description><![CDATA[Return a new Complex number which is the reciprocal of the argument.]]></Description><Summary><![CDATA[Return a new Complex number which is the reciprocal of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[-1/a]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="fromPolar" staticNature="static "><Description><![CDATA[Creates a Complex number from polar coordinates.]]></Description><Summary><![CDATA[Creates a Complex number from polar coordinates.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[the Complex number abs*e<sup>i*arg</sup>]]></Description></Returns><Parameters><Parameter name="abs" type="float"/><Parameter name="arg" type="float"/></Parameters></Action><Action name="isFinite" staticNature=""><Description><![CDATA[Returns true if both parts of this Complex number are finite.]]></Description><Summary><![CDATA[Returns true if both parts of this Complex number are finite.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="INFINITY" staticNature="static "><Description><![CDATA[Returns infinity + infinity*i, represented as a complex number.]]></Description><Summary><![CDATA[Returns infinity + infinity*i, represented as a complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="min" staticNature="static "><Description><![CDATA[Return the smaller of two Complex numbers.]]></Description><Summary><![CDATA[Return the smaller of two Complex numbers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="isInfinite" staticNature=""><Description><![CDATA[Returns true if either part of this Complex number is infinite.]]></Description><Summary><![CDATA[Returns true if either part of this Complex number is infinite.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/></Action><Action name="arg" staticNature=""><Description><![CDATA[Return the polar angle of this Complex number.]]></Description><Summary><![CDATA[Return the polar angle of this Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="uconjugate" staticNature=""><Description><![CDATA[Assign this to its complex conjugate and return self.]]></Description><Summary><![CDATA[Assign this to its complex conjugate and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="pow" staticNature="static "><Description><![CDATA[Return a Complex number raised to the power of a second Complex number as a new Complex number.]]></Description><Summary><![CDATA[Return a Complex number raised to the power of a second Complex number as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a<sup>b</sup>]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="sin" staticNature="static "><Description><![CDATA[Returns the sine of the argument as a new Complex number.]]></Description><Summary><![CDATA[Returns the sine of the argument as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[sin(a)]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="divide" staticNature="static "><Description><![CDATA[Divide two complex numbers and return a new Complex number with the result.]]></Description><Summary><![CDATA[Divide two complex numbers and return a new Complex number with the result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a/b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="multiply" staticNature="static "><Description><![CDATA[Multiply two complex numbers and return a new Complex number with the result.]]></Description><Summary><![CDATA[Multiply two complex numbers and return a new Complex number with the result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a*b.]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="divideReal" staticNature="static "><Description><![CDATA[Divide the given complex number by a real divisor and return the result as a new Complex number.]]></Description><Summary><![CDATA[Divide the given complex number by a real divisor and return the result as a new Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[a/b]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" type="float"/></Parameters></Action><Action name="max" staticNature="static "><Description><![CDATA[Return the larger of two Complex numbers.]]></Description><Summary><![CDATA[Return the larger of two Complex numbers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="a" package="com.apamax" type="Complex"/><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="umultiplyReal" staticNature=""><Description><![CDATA[Set this Complex number to be multiplied by the real argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to be multiplied by the real argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="b" type="float"/></Parameters></Action><Action name="usubtract" staticNature=""><Description><![CDATA[Set this Complex number to subtract the argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to subtract the argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="udivide" staticNature=""><Description><![CDATA[Set this Complex number to be divided by the argument and return self.]]></Description><Summary><![CDATA[Set this Complex number to be divided by the argument and return self.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/><Parameters><Parameter name="b" package="com.apamax" type="Complex"/></Parameters></Action><Action name="abs" staticNature=""><Description><![CDATA[Return the magnitude of this Complex number.]]></Description><Summary><![CDATA[Return the magnitude of this Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"><Description><![CDATA[|a|]]></Description></Returns></Action><Action name="negate" staticNature="static "><Description><![CDATA[Return a new Complex number which is the negation of the argument.]]></Description><Summary><![CDATA[Return a new Complex number which is the negation of the argument.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"><Description><![CDATA[-a]]></Description></Returns><Parameters><Parameter name="a" package="com.apamax" type="Complex"/></Parameters></Action><Action name="PI" staticNature="static "><Description><![CDATA[Returns the constant pi, represented as a complex number.]]></Description><Summary><![CDATA[Returns the constant pi, represented as a complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="NAN" staticNature="static "><Description><![CDATA[Returns a Complex number which is not a number.]]></Description><Summary><![CDATA[Returns a Complex number which is not a number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax" type="Complex"/></Action><Action name="imag" staticNature=""><Description><![CDATA[Returns the imaginary part of this Complex number.]]></Description><Summary><![CDATA[Returns the imaginary part of this Complex number.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action></Type></Package></Packages>